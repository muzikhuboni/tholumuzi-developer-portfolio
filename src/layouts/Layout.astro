---
import { ViewTransitions } from "astro:transitions";
import { Config } from "~/config";
import Header from '~/components/Header';
import Footer from '~/components/Footer.astro';
import icon from "~/assets/icon.webp";
import ThemeToggler from "~/components/ThemeToggler"
import "~/styles/tailwind.css";

interface Props {
  title?: string;
  description?: string;
  keywords?:string;
  og_title?: string;
  og_description?: string;
  og_type?: string;
  og_image?: string;
  blog_author?: string;
  blog_publishedOn?: string;
}

const {
  title = `${Config.me.name} | Software Developer`,
  description = "I am Sanjib Roy, a Software Developer with over 3 years of remote work experience, proficient in JavaScript, React.js, Next.js, Node.js, TypeScript, Electron.js, MongoDB, Ruby, Ruby on Rails, and PostgreSQL",
  keywords,
  og_title = Config.me.name,
  og_description = Config.me.name + "'s personal website.",
  og_type = "website",
  og_image = `${Config.website}${Config.og.image}`,
  blog_author,
  blog_publishedOn,
} = Astro.props;

const currentPath = Astro.url.pathname;
---

<!doctype html>
<html class="bg-base-100 text-base-content overflow-y-scroll" lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href={icon.src} />
    <title>{title}</title>
    <meta name="description" content={description} />
    <meta property="og:title" content={og_title} />
    <meta property="og:description" content={og_description} />
    <meta property="og:type" content={og_type} />
    <meta property="og:image" content={og_image} />
    <meta property="og:url" content={Astro.request.url} />
    <meta name="keywords" content={keywords} data-rh="true">
    <meta property="author" content={blog_author} />
    <meta property="publish-date" content={blog_publishedOn} />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/gh/devicons/devicon@latest/devicon.min.css"
    />
    <ViewTransitions />
  </head>
  <body class="relative bg-app">
    <ThemeToggler/>
    <section
      class="mx-auto md:w-10/12 lg:w-full w-full flex min-h-screen max-w-3xl flex-col container gap-3 md:gap-7"
    >
      <Header currentPath={currentPath} />
      
      <section class="relative grid grid-cols-1 lg:py-0 px-5 py-2 md:py-2 min-h-screen">
        <slot />
        <Footer/>
      </section>
    </section>
    <style is:global>
      @font-face {
        font-family: 'IBM Plex sans';
        src: url('/fonts/IBMPlexSans-Regular.ttf') format('truetype');
        font-weight: 400;
        font-style: normal;
      }
      @font-face {
        font-family: 'IBM Plex sans';
        src: url('/fonts/IBMPlexSans-Medium.ttf') format('truetype');
        font-weight: 700;
        font-style: normal;
      }
      @font-face {
        font-family: 'IBM Plex sans';
        src: url('/fonts/IBMPlexSans-Bold.ttf') format('truetype');
        font-weight: 900;
        font-style: normal;
      }
      @font-face {
        font-family: 'Inter';
        src: url('/fonts/Inter-Medium.ttf') format('truetype');
        font-weight: 500;
        font-style: normal;
      }

      @font-face {
        font-family: 'Inter';
        src: url('/fonts/Inter-Bold.ttf') format('truetype');
        font-weight: 700;
        font-style: normal;
      }

      body {
        box-sizing: border-box;
        font-size: 16px;
        line-height: 1.76 !important;
        font-family: 'IBM Plex sans', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        font-weight: 400;
        margin: 0;
        padding: 0;
      }
      h1, h2, h3, h4, h5, h6 {
        font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        font-weight: 500;
      }
      p, em {
        font-family: 'IBM Plex sans', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        font-weight: 400;
        line-height: 1.76 !important;
      }
      .container {
        max-width: 728px;
      }
      .custom-breadcrumbs {
        max-width: 100%;
        overflow-x: auto;
        padding-top: 0.5%;
      }
      
      .custom-breadcrumbs > ul {
        display: flex;
        align-items: center;
        white-space: nowrap;
        min-height: min-content;
      }

      .custom-breadcrumbs > ul > li {
        display: flex;
        align-items: center;
      }

      .custom-breadcrumbs > ul > li > a {
        display: flex;
        cursor: pointer;
        align-items: center;
      }

      #mobile-nav-pane {
        transition: transform 0.3s ease-out;
        transform: translateY(50px); /* Initial state, hidden below the viewport */
      }

      #mobile-nav-pane.show {
        transform: translateY(0); /* Final state, visible */
      }

      #mobile-nav-pane.hide {
        height: 0px;
        transform: translateY(500px); /* Exit state, moved out of the viewport */
      }

      @media (hover: hover) {
        .custom-breadcrumbs > ul > li > a:hover {
          text-decoration-line: underline;
        }
      }

      .custom-breadcrumbs > ul > li > a:focus {
        outline: 2px solid transparent;
        outline-offset: 2px;
      }

      .custom-breadcrumbs > ul > li > a:focus-visible {
        outline: 2px solid currentColor;
        outline-offset: 2px;
      }

      .custom-breadcrumbs > ul > li + *:before {
        content: "/";
        margin-left: 0.5rem /* 8px */;
        margin-right: 0.75rem /* 12px */;
        display: block;
        opacity: 0.4;
        background-color: transparent;
      }

      [dir="rtl"] .custom-breadcrumbs > ul > li + *:before {
        --tw-rotate: -180deg;
      }

      /* Show line numbers in a code block */
      code {
        counter-reset: line;
      }
      
      code > [data-line]::before {
        counter-increment: line;
        content: counter(line);
      
        /* Other styling */
        display: inline-block;
        width: 1rem;
        margin-right: 2rem;
        text-align: right;
        color: gray;
      }
      
      code[data-line-numbers-max-digits="2"] > [data-line]::before {
        width: 2rem;
      }
      
      code[data-line-numbers-max-digits="3"] > [data-line]::before {
        width: 3rem;
      }

      /* Copy code button */
      .copy-code {
        position: absolute;
        top: 0;
        right: 0;
        border-radius: 4px;
        background-color: #3730a3;
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
        line-height: 1rem;
      }

      .copy-code:hover {
        background-color: #312e81;
      }

      pre {
        padding-top: 1.5rem !important;
        padding-bottom: 1.5rem !important;
      }

      /* Link added to each header of any blog */
      .blog-wrapper {
        scroll: smooth;
      }

      .blog-content h2, 
      .blog-content h3, 
      .blog-content h4, 
      .blog-content h5, 
      .blog-content h6 {
        position: relative;
      }
      
      .blog-content h2:hover,
      .blog-content h3:hover,
      .blog-content h4:hover,
      .blog-content h5:hover,
      .blog-content h6:hover,
      .blog-content h2 a:hover,
      .blog-content h3 a:hover,
      .blog-content h4 a:hover,
      .blog-content h5 a:hover,
      .blog-content h6 a:hover {
        text-decoration-line: underline;
        text-decoration-style: wavy;
        text-decoration-thickness: 1px;
        cursor: pointer;
        opacity: 0.9;
      }

      .blog-content h2 a,
      .blog-content h3 a,
      .blog-content h4 a,
      .blog-content h5 a,
      .blog-content h6 a {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
      }
      article.blog-card .read-post-btn{
        display: none;
      }
      article.blog-card:hover .read-post-btn{
        display: block;
        transition: transform 0.3s ease-out;
        
      }

      .time-line-container>li:last-child .timeline-block>.bar {
        display: none;
      }
      .time-line-container>li:last-child .timeline-desc {
        padding-bottom: 0px;
        margin-bottom: 0px;
      }
    </style>
    <script>
      const defaultTheme = "dark";
      document.addEventListener("DOMContentLoaded", updateTheme);
      document.addEventListener("astro:after-swap", updateTheme);

      function updateTheme() {
        const theme = localStorage.getItem("theme") || defaultTheme; 
        document.documentElement.setAttribute("data-theme", theme);

        const themeToggle = document.querySelector("#theme-toggle-btn input[type='checkbox']") as HTMLInputElement | null;

        if(themeToggle) {
          themeToggle.checked = theme === "dark"; // Adjust this based on your theme names

          themeToggle.addEventListener("change", function(this: HTMLInputElement) {
            const newTheme = this?.checked ? "dark" : "light";
            document.documentElement.setAttribute("data-theme", newTheme);
            localStorage.setItem("theme", newTheme);
            localStorage.setItem("astroErrorOverlayTheme", newTheme);
          });
        }
      }
    </script>
    <script>
      function initNavScript() {
        const mobileNavMenuBtn = document?.getElementById('mobile-nav-menu-btn');
        const closeNavPaneBtn = document?.getElementById('mobile-close-nav-pane-btn');
        const mobileNavPane = document?.getElementById('mobile-nav-pane');
        const mobileNavOverlay = document?.getElementById('mobile-nav-overlay');
        const mobileNavPaneLinks = document?.querySelectorAll('#mobile-nav-pane .mobile-nav-pane-link');

        function showNavPane(e: React.MouseEvent<HTMLElement>| MouseEvent | Event) {
          e?.stopPropagation();
          mobileNavPane?.classList?.remove("hide");
          mobileNavOverlay?.classList?.remove("hidden");
          mobileNavPane?.classList?.add("show");
          closeNavPaneBtn?.classList?.remove("hidden");
          mobileNavMenuBtn?.classList?.add("hidden");
          mobileNavOverlay?.classList?.add("block");
        }

        function closeNavPane(e: React.MouseEvent<HTMLElement>| MouseEvent | Event) {
          e?.stopPropagation();

          mobileNavPane?.classList?.remove("show");
          mobileNavPane?.classList?.add("hide");
          mobileNavMenuBtn?.classList?.remove("hidden");
          closeNavPaneBtn?.classList?.add("hidden");
          mobileNavOverlay?.classList?.add("hidden");
          mobileNavOverlay?.classList?.remove("block");
        }

        mobileNavMenuBtn?.addEventListener('click', (e) => showNavPane(e));
        closeNavPaneBtn?.addEventListener('click', (e) => closeNavPane(e));
        mobileNavOverlay?.addEventListener('click', (e) => closeNavPane(e))
        mobileNavPaneLinks?.forEach(navPaneLink => {
          return navPaneLink?.addEventListener('click', (e) => closeNavPane(e))
        })
      };

      // Initialize on first load
      initNavScript()

      // Re-initialize after swapping pages
      document.addEventListener("astro:after-swap", initNavScript)
    </script>
    <script >
      function initCopyBtnScript() {
        const copyButtonLabel = "Copy";
        const codeBlocks = Array.from(document.querySelectorAll("pre"));

        for (const codeBlock of codeBlocks) {
          const wrapper = document?.createElement("div");
          wrapper.style.position = "relative";

          const copyButton = document.createElement("button");
          copyButton.className = "copy-code";
          copyButton.innerHTML = copyButtonLabel;

          codeBlock.setAttribute("tabindex", "0");
          codeBlock.appendChild(copyButton);
          // wrap codebock with relative parent element
          codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
          wrapper.appendChild(codeBlock);

          copyButton.addEventListener("click", async () => {
            await copyCode(codeBlock, copyButton);
          });
        }

        async function copyCode(block:any, button:any) {
          if(!button || !block) return;

          const code = block?.querySelector("code");
          const text = code?.innerText;

          await navigator.clipboard.writeText(text);

          // visual feedback that task is completed
          button.innerText = "Copied!";

          let timerId = setTimeout(() => {
            button.innerText = copyButtonLabel;
            clearTimeout(timerId);
          }, 900);
        }
      };

      // Initialize on first load
      initCopyBtnScript()

      // Re-initialize after swapping pages
      document.addEventListener("astro:after-swap", initCopyBtnScript)
    </script>
    </body>
  
</html>
